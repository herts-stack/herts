plugins {
    id 'java'
    id 'com.github.johnrengelman.shadow' version '8.1.1'
    id 'org.graalvm.buildtools.native' version '0.9.21'
}
apply plugin: 'application'

def javaVersion = project.hasProperty('javaVersion') ? project.getProperty('javaVersion') : '17'

group 'org.hertsstack.example'
version '1.0.0'
sourceCompatibility = javaVersion
targetCompatibility = javaVersion

repositories {
    mavenCentral()
    gradlePluginPortal()
}

def grpcVersion = '1.57.0'
dependencies {
    implementation project(':herts-core')
    implementation project(':herts-codegen')
    implementation project(':herts-rpc')
    implementation project(':herts-rpc-client')
    implementation project(':herts-http')
    implementation project(':herts-http-client')
    implementation project(':herts-broker-redis')
    implementation project(':herts-broker')

    implementation "io.grpc:grpc-protobuf:${grpcVersion}"
    implementation "io.grpc:grpc-services:${grpcVersion}"
    implementation "io.grpc:grpc-stub:${grpcVersion}"
    implementation "io.grpc:grpc-netty-shaded:${grpcVersion}"

    implementation 'redis.clients:jedis:4.3.1'

    implementation ('org.eclipse.jetty:jetty-server:10.0.15') {
        exclude group: "org.slf4j", module: "slf4j-api"
    }
    implementation ('org.eclipse.jetty:jetty-webapp:10.0.0') {
        exclude group: "org.slf4j", module: "slf4j-api"
    }
}

def mainClassPath = 'org.herts.example.Main'
application {
    mainClass = mainClassPath
}

jar {
    manifest {
        attributes 'Main-Class': mainClassPath
    }
}

test {
    useJUnitPlatform()
}

shadowJar {
    mergeServiceFiles()
}

tasks.register('runExampleHttp', JavaExec) {
    dependsOn 'classes'
    main = 'org.hertsstack.example.http.Main'
    classpath = sourceSets.main.runtimeClasspath
}

tasks.register('runExampleRpcUnary', JavaExec) {
    dependsOn 'classes'
    main = 'org.hertsstack.example.unary.Main'
    classpath = sourceSets.main.runtimeClasspath
}

tasks.register('runExampleRpcServerStreaming', JavaExec) {
    dependsOn 'classes'
    main = 'org.hertsstack.example.serversteaming.Main'
    classpath = sourceSets.main.runtimeClasspath
}

tasks.register('runExampleRpcClientStreaming', JavaExec) {
    dependsOn 'classes'
    main = 'org.hertsstack.example.clientsteaming.Main'
    classpath = sourceSets.main.runtimeClasspath
}

tasks.register('runExampleRpcBidStreaming', JavaExec) {
    dependsOn 'classes'
    main = 'org.hertsstack.example.bidsteaming.Main'
    classpath = sourceSets.main.runtimeClasspath
}

tasks.register('runExampleRpcReactiveLocalStreaming', JavaExec) {
    dependsOn 'classes'
    main = 'org.hertsstack.example.reactivesteaming.local.Main'
    classpath = sourceSets.main.runtimeClasspath
}

tasks.register('runExampleRpcReactiveRedisStreaming', JavaExec) {
    dependsOn 'classes'
    main = 'org.hertsstack.example.reactivesteaming.redis.Main'
    classpath = sourceSets.main.runtimeClasspath
}

tasks.register('runExampleJwtHttp', JavaExec) {
    dependsOn 'classes'
    main = 'org.hertsstack.example.jwthttp.Main'
    classpath = sourceSets.main.runtimeClasspath
}

tasks.register('runExampleJwtRpc', JavaExec) {
    dependsOn 'classes'
    main = 'org.hertsstack.example.jwtrpc.Main'
    classpath = sourceSets.main.runtimeClasspath
}

tasks.register('runExampleCodeGenTs', JavaExec) {
    dependsOn 'classes'
    main = 'org.hertsstack.example.codegents.Main'
    classpath = sourceSets.main.runtimeClasspath
}

graalvmNative {
    binaries {
        main {
            javaLauncher = javaToolchains.launcherFor {
                languageVersion = JavaLanguageVersion.of(17)
            }
        }
    }
}