// Don't edit this file because this file is generated by herts codegen.
import axios, {AxiosError, AxiosHeaders, RawAxiosResponseHeaders} from 'axios'
import {RequestHeaders} from './herts-structure.gen'

import {IntegerFuncMethodRequest} from './herts-HttpCodegenTestService-request-model.gen'
import {DoubleClassFuncMethodRequest} from './herts-HttpCodegenTestService-request-model.gen'
import {ByteClassFuncMethodRequest} from './herts-HttpCodegenTestService-request-model.gen'
import {ShortClassFuncMethodRequest} from './herts-HttpCodegenTestService-request-model.gen'
import {LongClassFuncMethodRequest} from './herts-HttpCodegenTestService-request-model.gen'
import {FloatClassFuncMethodRequest} from './herts-HttpCodegenTestService-request-model.gen'
import {BooleanClassFuncMethodRequest} from './herts-HttpCodegenTestService-request-model.gen'
import {BooleanFuncMethodRequest} from './herts-HttpCodegenTestService-request-model.gen'
import {CharacterFuncMethodRequest} from './herts-HttpCodegenTestService-request-model.gen'
import {BigDecimalFuncMethodRequest} from './herts-HttpCodegenTestService-request-model.gen'
import {ListStrFuncMethodRequest} from './herts-HttpCodegenTestService-request-model.gen'
import {CustomModelFuncMethodRequest} from './herts-HttpCodegenTestService-request-model.gen'
import {ArrayListFuncMethodRequest} from './herts-HttpCodegenTestService-request-model.gen'
import {CustomModelListFuncMethodRequest} from './herts-HttpCodegenTestService-request-model.gen'
import {HashMapFuncMethodRequest} from './herts-HttpCodegenTestService-request-model.gen'
import {CustomModelMapFuncMethodRequest} from './herts-HttpCodegenTestService-request-model.gen'
import {StringFuncMethodRequest} from './herts-HttpCodegenTestService-request-model.gen'
import {IntFuncMethodRequest} from './herts-HttpCodegenTestService-request-model.gen'
import {DoubleFuncMethodRequest} from './herts-HttpCodegenTestService-request-model.gen'
import {ByteFuncMethodRequest} from './herts-HttpCodegenTestService-request-model.gen'
import {ShortFuncMethodRequest} from './herts-HttpCodegenTestService-request-model.gen'
import {LingFuncMethodRequest} from './herts-HttpCodegenTestService-request-model.gen'
import {FloatFuncMethodRequest} from './herts-HttpCodegenTestService-request-model.gen'
import {CharFuncMethodRequest} from './herts-HttpCodegenTestService-request-model.gen'
import {BigIntFuncMethodRequest} from './herts-HttpCodegenTestService-request-model.gen'
import {DateFuncMethodRequest} from './herts-HttpCodegenTestService-request-model.gen'
import {UuidFuncMethodRequest} from './herts-HttpCodegenTestService-request-model.gen'
import {MapStrFuncMethodRequest} from './herts-HttpCodegenTestService-request-model.gen'
import {VoidFuncMethodRequest} from './herts-HttpCodegenTestService-request-model.gen'
import {ArrayFuncMethodRequest} from './herts-HttpCodegenTestService-request-model.gen'
import {ListFuncMethodRequest} from './herts-HttpCodegenTestService-request-model.gen'
import {MapFuncMethodRequest} from './herts-HttpCodegenTestService-request-model.gen'
import {CreateUserMethodRequest} from './herts-HttpCodegenTestService-request-model.gen'
import {GetUsersMethodRequest} from './herts-HttpCodegenTestService-request-model.gen'

import {IntegerFuncMethodResponse} from './herts-HttpCodegenTestService-response-model.gen'
import {DoubleClassFuncMethodResponse} from './herts-HttpCodegenTestService-response-model.gen'
import {ByteClassFuncMethodResponse} from './herts-HttpCodegenTestService-response-model.gen'
import {ShortClassFuncMethodResponse} from './herts-HttpCodegenTestService-response-model.gen'
import {LongClassFuncMethodResponse} from './herts-HttpCodegenTestService-response-model.gen'
import {FloatClassFuncMethodResponse} from './herts-HttpCodegenTestService-response-model.gen'
import {BooleanClassFuncMethodResponse} from './herts-HttpCodegenTestService-response-model.gen'
import {BooleanFuncMethodResponse} from './herts-HttpCodegenTestService-response-model.gen'
import {CharacterFuncMethodResponse} from './herts-HttpCodegenTestService-response-model.gen'
import {BigDecimalFuncMethodResponse} from './herts-HttpCodegenTestService-response-model.gen'
import {ListStrFuncMethodResponse} from './herts-HttpCodegenTestService-response-model.gen'
import {CustomModelFuncMethodResponse} from './herts-HttpCodegenTestService-response-model.gen'
import {ArrayListFuncMethodResponse} from './herts-HttpCodegenTestService-response-model.gen'
import {CustomModelListFuncMethodResponse} from './herts-HttpCodegenTestService-response-model.gen'
import {HashMapFuncMethodResponse} from './herts-HttpCodegenTestService-response-model.gen'
import {CustomModelMapFuncMethodResponse} from './herts-HttpCodegenTestService-response-model.gen'
import {StringFuncMethodResponse} from './herts-HttpCodegenTestService-response-model.gen'
import {IntFuncMethodResponse} from './herts-HttpCodegenTestService-response-model.gen'
import {DoubleFuncMethodResponse} from './herts-HttpCodegenTestService-response-model.gen'
import {ByteFuncMethodResponse} from './herts-HttpCodegenTestService-response-model.gen'
import {ShortFuncMethodResponse} from './herts-HttpCodegenTestService-response-model.gen'
import {LingFuncMethodResponse} from './herts-HttpCodegenTestService-response-model.gen'
import {FloatFuncMethodResponse} from './herts-HttpCodegenTestService-response-model.gen'
import {CharFuncMethodResponse} from './herts-HttpCodegenTestService-response-model.gen'
import {BigIntFuncMethodResponse} from './herts-HttpCodegenTestService-response-model.gen'
import {DateFuncMethodResponse} from './herts-HttpCodegenTestService-response-model.gen'
import {UuidFuncMethodResponse} from './herts-HttpCodegenTestService-response-model.gen'
import {MapStrFuncMethodResponse} from './herts-HttpCodegenTestService-response-model.gen'
import {VoidFuncMethodResponse} from './herts-HttpCodegenTestService-response-model.gen'
import {ArrayFuncMethodResponse} from './herts-HttpCodegenTestService-response-model.gen'
import {ListFuncMethodResponse} from './herts-HttpCodegenTestService-response-model.gen'
import {MapFuncMethodResponse} from './herts-HttpCodegenTestService-response-model.gen'
import {CreateUserMethodResponse} from './herts-HttpCodegenTestService-response-model.gen'
import {GetUsersMethodResponse} from './herts-HttpCodegenTestService-response-model.gen'

import {CustomModel} from './herts-structure.gen'
import {User} from './herts-structure.gen'

export class HttpCodegenTestServiceClient {

    /**
     * API endpoint information with protocol schema.
     * @param apiSchema http|https://hoge.com
     */
     constructor(private apiSchema: string) {}

     public async integerFunc ( headers: RequestHeaders ): Promise<number | null> {
        const body = null;
        return await axios.post<IntegerFuncMethodResponse>(
            `${(this.apiSchema)}/api/HttpCodegenTestService/integerFunc`,
             body,
             {
                headers: headers,
             })
             .then(res => {
                if (res.data.payload === undefined || res.data.payload === null) {
                    return null;
                }
                return res.data.payload.value;
             })
             .catch((e: AxiosError<any>) => {
                throw e;
             })
     }

     public async options_integerFunc ( headers: RequestHeaders ): Promise<RawAxiosResponseHeaders | (RawAxiosResponseHeaders & AxiosHeaders) | void> {
        return await axios.options<IntegerFuncMethodResponse>(
            `${(this.apiSchema)}/api/HttpCodegenTestService/integerFunc`,
            {
                headers: headers
            })
            .then(res => {
                return res.headers;
            })
            .catch((e: AxiosError<any>) => {
                throw e;
            })
     }
     public async doubleClassFunc ( headers: RequestHeaders ): Promise<number | null> {
        const body = null;
        return await axios.post<DoubleClassFuncMethodResponse>(
            `${(this.apiSchema)}/api/HttpCodegenTestService/doubleClassFunc`,
             body,
             {
                headers: headers,
             })
             .then(res => {
                if (res.data.payload === undefined || res.data.payload === null) {
                    return null;
                }
                return res.data.payload.value;
             })
             .catch((e: AxiosError<any>) => {
                throw e;
             })
     }

     public async options_doubleClassFunc ( headers: RequestHeaders ): Promise<RawAxiosResponseHeaders | (RawAxiosResponseHeaders & AxiosHeaders) | void> {
        return await axios.options<DoubleClassFuncMethodResponse>(
            `${(this.apiSchema)}/api/HttpCodegenTestService/doubleClassFunc`,
            {
                headers: headers
            })
            .then(res => {
                return res.headers;
            })
            .catch((e: AxiosError<any>) => {
                throw e;
            })
     }
     public async byteClassFunc ( headers: RequestHeaders ): Promise<number | null> {
        const body = null;
        return await axios.post<ByteClassFuncMethodResponse>(
            `${(this.apiSchema)}/api/HttpCodegenTestService/byteClassFunc`,
             body,
             {
                headers: headers,
             })
             .then(res => {
                if (res.data.payload === undefined || res.data.payload === null) {
                    return null;
                }
                return res.data.payload.value;
             })
             .catch((e: AxiosError<any>) => {
                throw e;
             })
     }

     public async options_byteClassFunc ( headers: RequestHeaders ): Promise<RawAxiosResponseHeaders | (RawAxiosResponseHeaders & AxiosHeaders) | void> {
        return await axios.options<ByteClassFuncMethodResponse>(
            `${(this.apiSchema)}/api/HttpCodegenTestService/byteClassFunc`,
            {
                headers: headers
            })
            .then(res => {
                return res.headers;
            })
            .catch((e: AxiosError<any>) => {
                throw e;
            })
     }
     public async shortClassFunc ( headers: RequestHeaders ): Promise<number | null> {
        const body = null;
        return await axios.post<ShortClassFuncMethodResponse>(
            `${(this.apiSchema)}/api/HttpCodegenTestService/shortClassFunc`,
             body,
             {
                headers: headers,
             })
             .then(res => {
                if (res.data.payload === undefined || res.data.payload === null) {
                    return null;
                }
                return res.data.payload.value;
             })
             .catch((e: AxiosError<any>) => {
                throw e;
             })
     }

     public async options_shortClassFunc ( headers: RequestHeaders ): Promise<RawAxiosResponseHeaders | (RawAxiosResponseHeaders & AxiosHeaders) | void> {
        return await axios.options<ShortClassFuncMethodResponse>(
            `${(this.apiSchema)}/api/HttpCodegenTestService/shortClassFunc`,
            {
                headers: headers
            })
            .then(res => {
                return res.headers;
            })
            .catch((e: AxiosError<any>) => {
                throw e;
            })
     }
     public async longClassFunc ( headers: RequestHeaders ): Promise<number | null> {
        const body = null;
        return await axios.post<LongClassFuncMethodResponse>(
            `${(this.apiSchema)}/api/HttpCodegenTestService/longClassFunc`,
             body,
             {
                headers: headers,
             })
             .then(res => {
                if (res.data.payload === undefined || res.data.payload === null) {
                    return null;
                }
                return res.data.payload.value;
             })
             .catch((e: AxiosError<any>) => {
                throw e;
             })
     }

     public async options_longClassFunc ( headers: RequestHeaders ): Promise<RawAxiosResponseHeaders | (RawAxiosResponseHeaders & AxiosHeaders) | void> {
        return await axios.options<LongClassFuncMethodResponse>(
            `${(this.apiSchema)}/api/HttpCodegenTestService/longClassFunc`,
            {
                headers: headers
            })
            .then(res => {
                return res.headers;
            })
            .catch((e: AxiosError<any>) => {
                throw e;
            })
     }
     public async floatClassFunc ( headers: RequestHeaders ): Promise<number | null> {
        const body = null;
        return await axios.post<FloatClassFuncMethodResponse>(
            `${(this.apiSchema)}/api/HttpCodegenTestService/floatClassFunc`,
             body,
             {
                headers: headers,
             })
             .then(res => {
                if (res.data.payload === undefined || res.data.payload === null) {
                    return null;
                }
                return res.data.payload.value;
             })
             .catch((e: AxiosError<any>) => {
                throw e;
             })
     }

     public async options_floatClassFunc ( headers: RequestHeaders ): Promise<RawAxiosResponseHeaders | (RawAxiosResponseHeaders & AxiosHeaders) | void> {
        return await axios.options<FloatClassFuncMethodResponse>(
            `${(this.apiSchema)}/api/HttpCodegenTestService/floatClassFunc`,
            {
                headers: headers
            })
            .then(res => {
                return res.headers;
            })
            .catch((e: AxiosError<any>) => {
                throw e;
            })
     }
     public async booleanClassFunc ( headers: RequestHeaders ): Promise<boolean | null> {
        const body = null;
        return await axios.post<BooleanClassFuncMethodResponse>(
            `${(this.apiSchema)}/api/HttpCodegenTestService/booleanClassFunc`,
             body,
             {
                headers: headers,
             })
             .then(res => {
                if (res.data.payload === undefined || res.data.payload === null) {
                    return null;
                }
                return res.data.payload.value;
             })
             .catch((e: AxiosError<any>) => {
                throw e;
             })
     }

     public async options_booleanClassFunc ( headers: RequestHeaders ): Promise<RawAxiosResponseHeaders | (RawAxiosResponseHeaders & AxiosHeaders) | void> {
        return await axios.options<BooleanClassFuncMethodResponse>(
            `${(this.apiSchema)}/api/HttpCodegenTestService/booleanClassFunc`,
            {
                headers: headers
            })
            .then(res => {
                return res.headers;
            })
            .catch((e: AxiosError<any>) => {
                throw e;
            })
     }
     public async booleanFunc ( headers: RequestHeaders ): Promise<boolean | null> {
        const body = null;
        return await axios.post<BooleanFuncMethodResponse>(
            `${(this.apiSchema)}/api/HttpCodegenTestService/booleanFunc`,
             body,
             {
                headers: headers,
             })
             .then(res => {
                if (res.data.payload === undefined || res.data.payload === null) {
                    return null;
                }
                return res.data.payload.value;
             })
             .catch((e: AxiosError<any>) => {
                throw e;
             })
     }

     public async options_booleanFunc ( headers: RequestHeaders ): Promise<RawAxiosResponseHeaders | (RawAxiosResponseHeaders & AxiosHeaders) | void> {
        return await axios.options<BooleanFuncMethodResponse>(
            `${(this.apiSchema)}/api/HttpCodegenTestService/booleanFunc`,
            {
                headers: headers
            })
            .then(res => {
                return res.headers;
            })
            .catch((e: AxiosError<any>) => {
                throw e;
            })
     }
     public async characterFunc ( headers: RequestHeaders ): Promise<string | null> {
        const body = null;
        return await axios.post<CharacterFuncMethodResponse>(
            `${(this.apiSchema)}/api/HttpCodegenTestService/characterFunc`,
             body,
             {
                headers: headers,
             })
             .then(res => {
                if (res.data.payload === undefined || res.data.payload === null) {
                    return null;
                }
                return res.data.payload.value;
             })
             .catch((e: AxiosError<any>) => {
                throw e;
             })
     }

     public async options_characterFunc ( headers: RequestHeaders ): Promise<RawAxiosResponseHeaders | (RawAxiosResponseHeaders & AxiosHeaders) | void> {
        return await axios.options<CharacterFuncMethodResponse>(
            `${(this.apiSchema)}/api/HttpCodegenTestService/characterFunc`,
            {
                headers: headers
            })
            .then(res => {
                return res.headers;
            })
            .catch((e: AxiosError<any>) => {
                throw e;
            })
     }
     public async bigDecimalFunc ( headers: RequestHeaders ): Promise<number | null> {
        const body = null;
        return await axios.post<BigDecimalFuncMethodResponse>(
            `${(this.apiSchema)}/api/HttpCodegenTestService/bigDecimalFunc`,
             body,
             {
                headers: headers,
             })
             .then(res => {
                if (res.data.payload === undefined || res.data.payload === null) {
                    return null;
                }
                return res.data.payload.value;
             })
             .catch((e: AxiosError<any>) => {
                throw e;
             })
     }

     public async options_bigDecimalFunc ( headers: RequestHeaders ): Promise<RawAxiosResponseHeaders | (RawAxiosResponseHeaders & AxiosHeaders) | void> {
        return await axios.options<BigDecimalFuncMethodResponse>(
            `${(this.apiSchema)}/api/HttpCodegenTestService/bigDecimalFunc`,
            {
                headers: headers
            })
            .then(res => {
                return res.headers;
            })
            .catch((e: AxiosError<any>) => {
                throw e;
            })
     }
     public async listStrFunc ( headers: RequestHeaders ): Promise<Array<string> | null> {
        const body = null;
        return await axios.post<ListStrFuncMethodResponse>(
            `${(this.apiSchema)}/api/HttpCodegenTestService/listStrFunc`,
             body,
             {
                headers: headers,
             })
             .then(res => {
                if (res.data.payload === undefined || res.data.payload === null) {
                    return null;
                }
                return res.data.payload.value;
             })
             .catch((e: AxiosError<any>) => {
                throw e;
             })
     }

     public async options_listStrFunc ( headers: RequestHeaders ): Promise<RawAxiosResponseHeaders | (RawAxiosResponseHeaders & AxiosHeaders) | void> {
        return await axios.options<ListStrFuncMethodResponse>(
            `${(this.apiSchema)}/api/HttpCodegenTestService/listStrFunc`,
            {
                headers: headers
            })
            .then(res => {
                return res.headers;
            })
            .catch((e: AxiosError<any>) => {
                throw e;
            })
     }
     public async customModelFunc ( headers: RequestHeaders, body: CustomModelFuncMethodRequest ): Promise<CustomModel | null> {
        return await axios.post<CustomModelFuncMethodResponse>(
            `${(this.apiSchema)}/api/HttpCodegenTestService/customModelFunc`,
             body,
             {
                headers: headers,
             })
             .then(res => {
                if (res.data.payload === undefined || res.data.payload === null) {
                    return null;
                }
                return res.data.payload.value;
             })
             .catch((e: AxiosError<any>) => {
                throw e;
             })
     }

     public async options_customModelFunc ( headers: RequestHeaders ): Promise<RawAxiosResponseHeaders | (RawAxiosResponseHeaders & AxiosHeaders) | void> {
        return await axios.options<CustomModelFuncMethodResponse>(
            `${(this.apiSchema)}/api/HttpCodegenTestService/customModelFunc`,
            {
                headers: headers
            })
            .then(res => {
                return res.headers;
            })
            .catch((e: AxiosError<any>) => {
                throw e;
            })
     }
     public async arrayListFunc ( headers: RequestHeaders ): Promise<any | null> {
        const body = null;
        return await axios.post<ArrayListFuncMethodResponse>(
            `${(this.apiSchema)}/api/HttpCodegenTestService/arrayListFunc`,
             body,
             {
                headers: headers,
             })
             .then(res => {
                if (res.data.payload === undefined || res.data.payload === null) {
                    return null;
                }
                return res.data.payload.value;
             })
             .catch((e: AxiosError<any>) => {
                throw e;
             })
     }

     public async options_arrayListFunc ( headers: RequestHeaders ): Promise<RawAxiosResponseHeaders | (RawAxiosResponseHeaders & AxiosHeaders) | void> {
        return await axios.options<ArrayListFuncMethodResponse>(
            `${(this.apiSchema)}/api/HttpCodegenTestService/arrayListFunc`,
            {
                headers: headers
            })
            .then(res => {
                return res.headers;
            })
            .catch((e: AxiosError<any>) => {
                throw e;
            })
     }
     public async customModelListFunc ( headers: RequestHeaders ): Promise<Array<CustomModel> | null> {
        const body = null;
        return await axios.post<CustomModelListFuncMethodResponse>(
            `${(this.apiSchema)}/api/HttpCodegenTestService/customModelListFunc`,
             body,
             {
                headers: headers,
             })
             .then(res => {
                if (res.data.payload === undefined || res.data.payload === null) {
                    return null;
                }
                return res.data.payload.value;
             })
             .catch((e: AxiosError<any>) => {
                throw e;
             })
     }

     public async options_customModelListFunc ( headers: RequestHeaders ): Promise<RawAxiosResponseHeaders | (RawAxiosResponseHeaders & AxiosHeaders) | void> {
        return await axios.options<CustomModelListFuncMethodResponse>(
            `${(this.apiSchema)}/api/HttpCodegenTestService/customModelListFunc`,
            {
                headers: headers
            })
            .then(res => {
                return res.headers;
            })
            .catch((e: AxiosError<any>) => {
                throw e;
            })
     }
     public async hashMapFunc ( headers: RequestHeaders ): Promise<Map<string, string> | null> {
        const body = null;
        return await axios.post<HashMapFuncMethodResponse>(
            `${(this.apiSchema)}/api/HttpCodegenTestService/hashMapFunc`,
             body,
             {
                headers: headers,
             })
             .then(res => {
                if (res.data.payload === undefined || res.data.payload === null) {
                    return null;
                }
                return res.data.payload.value;
             })
             .catch((e: AxiosError<any>) => {
                throw e;
             })
     }

     public async options_hashMapFunc ( headers: RequestHeaders ): Promise<RawAxiosResponseHeaders | (RawAxiosResponseHeaders & AxiosHeaders) | void> {
        return await axios.options<HashMapFuncMethodResponse>(
            `${(this.apiSchema)}/api/HttpCodegenTestService/hashMapFunc`,
            {
                headers: headers
            })
            .then(res => {
                return res.headers;
            })
            .catch((e: AxiosError<any>) => {
                throw e;
            })
     }
     public async customModelMapFunc ( headers: RequestHeaders ): Promise<Map<CustomModel, CustomModel> | null> {
        const body = null;
        return await axios.post<CustomModelMapFuncMethodResponse>(
            `${(this.apiSchema)}/api/HttpCodegenTestService/customModelMapFunc`,
             body,
             {
                headers: headers,
             })
             .then(res => {
                if (res.data.payload === undefined || res.data.payload === null) {
                    return null;
                }
                return res.data.payload.value;
             })
             .catch((e: AxiosError<any>) => {
                throw e;
             })
     }

     public async options_customModelMapFunc ( headers: RequestHeaders ): Promise<RawAxiosResponseHeaders | (RawAxiosResponseHeaders & AxiosHeaders) | void> {
        return await axios.options<CustomModelMapFuncMethodResponse>(
            `${(this.apiSchema)}/api/HttpCodegenTestService/customModelMapFunc`,
            {
                headers: headers
            })
            .then(res => {
                return res.headers;
            })
            .catch((e: AxiosError<any>) => {
                throw e;
            })
     }
     public async stringFunc ( headers: RequestHeaders ): Promise<string | null> {
        const body = null;
        return await axios.post<StringFuncMethodResponse>(
            `${(this.apiSchema)}/api/HttpCodegenTestService/stringFunc`,
             body,
             {
                headers: headers,
             })
             .then(res => {
                if (res.data.payload === undefined || res.data.payload === null) {
                    return null;
                }
                return res.data.payload.value;
             })
             .catch((e: AxiosError<any>) => {
                throw e;
             })
     }

     public async options_stringFunc ( headers: RequestHeaders ): Promise<RawAxiosResponseHeaders | (RawAxiosResponseHeaders & AxiosHeaders) | void> {
        return await axios.options<StringFuncMethodResponse>(
            `${(this.apiSchema)}/api/HttpCodegenTestService/stringFunc`,
            {
                headers: headers
            })
            .then(res => {
                return res.headers;
            })
            .catch((e: AxiosError<any>) => {
                throw e;
            })
     }
     public async intFunc ( headers: RequestHeaders, body: IntFuncMethodRequest ): Promise<number | null> {
        return await axios.post<IntFuncMethodResponse>(
            `${(this.apiSchema)}/api/HttpCodegenTestService/intFunc`,
             body,
             {
                headers: headers,
             })
             .then(res => {
                if (res.data.payload === undefined || res.data.payload === null) {
                    return null;
                }
                return res.data.payload.value;
             })
             .catch((e: AxiosError<any>) => {
                throw e;
             })
     }

     public async options_intFunc ( headers: RequestHeaders ): Promise<RawAxiosResponseHeaders | (RawAxiosResponseHeaders & AxiosHeaders) | void> {
        return await axios.options<IntFuncMethodResponse>(
            `${(this.apiSchema)}/api/HttpCodegenTestService/intFunc`,
            {
                headers: headers
            })
            .then(res => {
                return res.headers;
            })
            .catch((e: AxiosError<any>) => {
                throw e;
            })
     }
     public async doubleFunc ( headers: RequestHeaders ): Promise<number | null> {
        const body = null;
        return await axios.post<DoubleFuncMethodResponse>(
            `${(this.apiSchema)}/api/HttpCodegenTestService/doubleFunc`,
             body,
             {
                headers: headers,
             })
             .then(res => {
                if (res.data.payload === undefined || res.data.payload === null) {
                    return null;
                }
                return res.data.payload.value;
             })
             .catch((e: AxiosError<any>) => {
                throw e;
             })
     }

     public async options_doubleFunc ( headers: RequestHeaders ): Promise<RawAxiosResponseHeaders | (RawAxiosResponseHeaders & AxiosHeaders) | void> {
        return await axios.options<DoubleFuncMethodResponse>(
            `${(this.apiSchema)}/api/HttpCodegenTestService/doubleFunc`,
            {
                headers: headers
            })
            .then(res => {
                return res.headers;
            })
            .catch((e: AxiosError<any>) => {
                throw e;
            })
     }
     public async byteFunc ( headers: RequestHeaders ): Promise<number | null> {
        const body = null;
        return await axios.post<ByteFuncMethodResponse>(
            `${(this.apiSchema)}/api/HttpCodegenTestService/byteFunc`,
             body,
             {
                headers: headers,
             })
             .then(res => {
                if (res.data.payload === undefined || res.data.payload === null) {
                    return null;
                }
                return res.data.payload.value;
             })
             .catch((e: AxiosError<any>) => {
                throw e;
             })
     }

     public async options_byteFunc ( headers: RequestHeaders ): Promise<RawAxiosResponseHeaders | (RawAxiosResponseHeaders & AxiosHeaders) | void> {
        return await axios.options<ByteFuncMethodResponse>(
            `${(this.apiSchema)}/api/HttpCodegenTestService/byteFunc`,
            {
                headers: headers
            })
            .then(res => {
                return res.headers;
            })
            .catch((e: AxiosError<any>) => {
                throw e;
            })
     }
     public async shortFunc ( headers: RequestHeaders ): Promise<number | null> {
        const body = null;
        return await axios.post<ShortFuncMethodResponse>(
            `${(this.apiSchema)}/api/HttpCodegenTestService/shortFunc`,
             body,
             {
                headers: headers,
             })
             .then(res => {
                if (res.data.payload === undefined || res.data.payload === null) {
                    return null;
                }
                return res.data.payload.value;
             })
             .catch((e: AxiosError<any>) => {
                throw e;
             })
     }

     public async options_shortFunc ( headers: RequestHeaders ): Promise<RawAxiosResponseHeaders | (RawAxiosResponseHeaders & AxiosHeaders) | void> {
        return await axios.options<ShortFuncMethodResponse>(
            `${(this.apiSchema)}/api/HttpCodegenTestService/shortFunc`,
            {
                headers: headers
            })
            .then(res => {
                return res.headers;
            })
            .catch((e: AxiosError<any>) => {
                throw e;
            })
     }
     public async lingFunc ( headers: RequestHeaders ): Promise<number | null> {
        const body = null;
        return await axios.post<LingFuncMethodResponse>(
            `${(this.apiSchema)}/api/HttpCodegenTestService/lingFunc`,
             body,
             {
                headers: headers,
             })
             .then(res => {
                if (res.data.payload === undefined || res.data.payload === null) {
                    return null;
                }
                return res.data.payload.value;
             })
             .catch((e: AxiosError<any>) => {
                throw e;
             })
     }

     public async options_lingFunc ( headers: RequestHeaders ): Promise<RawAxiosResponseHeaders | (RawAxiosResponseHeaders & AxiosHeaders) | void> {
        return await axios.options<LingFuncMethodResponse>(
            `${(this.apiSchema)}/api/HttpCodegenTestService/lingFunc`,
            {
                headers: headers
            })
            .then(res => {
                return res.headers;
            })
            .catch((e: AxiosError<any>) => {
                throw e;
            })
     }
     public async floatFunc ( headers: RequestHeaders ): Promise<number | null> {
        const body = null;
        return await axios.post<FloatFuncMethodResponse>(
            `${(this.apiSchema)}/api/HttpCodegenTestService/floatFunc`,
             body,
             {
                headers: headers,
             })
             .then(res => {
                if (res.data.payload === undefined || res.data.payload === null) {
                    return null;
                }
                return res.data.payload.value;
             })
             .catch((e: AxiosError<any>) => {
                throw e;
             })
     }

     public async options_floatFunc ( headers: RequestHeaders ): Promise<RawAxiosResponseHeaders | (RawAxiosResponseHeaders & AxiosHeaders) | void> {
        return await axios.options<FloatFuncMethodResponse>(
            `${(this.apiSchema)}/api/HttpCodegenTestService/floatFunc`,
            {
                headers: headers
            })
            .then(res => {
                return res.headers;
            })
            .catch((e: AxiosError<any>) => {
                throw e;
            })
     }
     public async charFunc ( headers: RequestHeaders ): Promise<string | null> {
        const body = null;
        return await axios.post<CharFuncMethodResponse>(
            `${(this.apiSchema)}/api/HttpCodegenTestService/charFunc`,
             body,
             {
                headers: headers,
             })
             .then(res => {
                if (res.data.payload === undefined || res.data.payload === null) {
                    return null;
                }
                return res.data.payload.value;
             })
             .catch((e: AxiosError<any>) => {
                throw e;
             })
     }

     public async options_charFunc ( headers: RequestHeaders ): Promise<RawAxiosResponseHeaders | (RawAxiosResponseHeaders & AxiosHeaders) | void> {
        return await axios.options<CharFuncMethodResponse>(
            `${(this.apiSchema)}/api/HttpCodegenTestService/charFunc`,
            {
                headers: headers
            })
            .then(res => {
                return res.headers;
            })
            .catch((e: AxiosError<any>) => {
                throw e;
            })
     }
     public async bigIntFunc ( headers: RequestHeaders ): Promise<number | null> {
        const body = null;
        return await axios.post<BigIntFuncMethodResponse>(
            `${(this.apiSchema)}/api/HttpCodegenTestService/bigIntFunc`,
             body,
             {
                headers: headers,
             })
             .then(res => {
                if (res.data.payload === undefined || res.data.payload === null) {
                    return null;
                }
                return res.data.payload.value;
             })
             .catch((e: AxiosError<any>) => {
                throw e;
             })
     }

     public async options_bigIntFunc ( headers: RequestHeaders ): Promise<RawAxiosResponseHeaders | (RawAxiosResponseHeaders & AxiosHeaders) | void> {
        return await axios.options<BigIntFuncMethodResponse>(
            `${(this.apiSchema)}/api/HttpCodegenTestService/bigIntFunc`,
            {
                headers: headers
            })
            .then(res => {
                return res.headers;
            })
            .catch((e: AxiosError<any>) => {
                throw e;
            })
     }
     public async dateFunc ( headers: RequestHeaders ): Promise<Date | null> {
        const body = null;
        return await axios.post<DateFuncMethodResponse>(
            `${(this.apiSchema)}/api/HttpCodegenTestService/dateFunc`,
             body,
             {
                headers: headers,
             })
             .then(res => {
                if (res.data.payload === undefined || res.data.payload === null) {
                    return null;
                }
                return res.data.payload.value;
             })
             .catch((e: AxiosError<any>) => {
                throw e;
             })
     }

     public async options_dateFunc ( headers: RequestHeaders ): Promise<RawAxiosResponseHeaders | (RawAxiosResponseHeaders & AxiosHeaders) | void> {
        return await axios.options<DateFuncMethodResponse>(
            `${(this.apiSchema)}/api/HttpCodegenTestService/dateFunc`,
            {
                headers: headers
            })
            .then(res => {
                return res.headers;
            })
            .catch((e: AxiosError<any>) => {
                throw e;
            })
     }
     public async uuidFunc ( headers: RequestHeaders ): Promise<string | null> {
        const body = null;
        return await axios.post<UuidFuncMethodResponse>(
            `${(this.apiSchema)}/api/HttpCodegenTestService/uuidFunc`,
             body,
             {
                headers: headers,
             })
             .then(res => {
                if (res.data.payload === undefined || res.data.payload === null) {
                    return null;
                }
                return res.data.payload.value;
             })
             .catch((e: AxiosError<any>) => {
                throw e;
             })
     }

     public async options_uuidFunc ( headers: RequestHeaders ): Promise<RawAxiosResponseHeaders | (RawAxiosResponseHeaders & AxiosHeaders) | void> {
        return await axios.options<UuidFuncMethodResponse>(
            `${(this.apiSchema)}/api/HttpCodegenTestService/uuidFunc`,
            {
                headers: headers
            })
            .then(res => {
                return res.headers;
            })
            .catch((e: AxiosError<any>) => {
                throw e;
            })
     }
     public async mapStrFunc ( headers: RequestHeaders ): Promise<Map<string, string> | null> {
        const body = null;
        return await axios.post<MapStrFuncMethodResponse>(
            `${(this.apiSchema)}/api/HttpCodegenTestService/mapStrFunc`,
             body,
             {
                headers: headers,
             })
             .then(res => {
                if (res.data.payload === undefined || res.data.payload === null) {
                    return null;
                }
                return res.data.payload.value;
             })
             .catch((e: AxiosError<any>) => {
                throw e;
             })
     }

     public async options_mapStrFunc ( headers: RequestHeaders ): Promise<RawAxiosResponseHeaders | (RawAxiosResponseHeaders & AxiosHeaders) | void> {
        return await axios.options<MapStrFuncMethodResponse>(
            `${(this.apiSchema)}/api/HttpCodegenTestService/mapStrFunc`,
            {
                headers: headers
            })
            .then(res => {
                return res.headers;
            })
            .catch((e: AxiosError<any>) => {
                throw e;
            })
     }
     public async voidFunc ( headers: RequestHeaders ): Promise<any | null> {
        const body = null;
        return await axios.post<VoidFuncMethodResponse>(
            `${(this.apiSchema)}/api/HttpCodegenTestService/voidFunc`,
             body,
             {
                headers: headers,
             })
             .then(res => {
                if (res.data.payload === undefined || res.data.payload === null) {
                    return null;
                }
                return res.data.payload.value;
             })
             .catch((e: AxiosError<any>) => {
                throw e;
             })
     }

     public async options_voidFunc ( headers: RequestHeaders ): Promise<RawAxiosResponseHeaders | (RawAxiosResponseHeaders & AxiosHeaders) | void> {
        return await axios.options<VoidFuncMethodResponse>(
            `${(this.apiSchema)}/api/HttpCodegenTestService/voidFunc`,
            {
                headers: headers
            })
            .then(res => {
                return res.headers;
            })
            .catch((e: AxiosError<any>) => {
                throw e;
            })
     }
     public async arrayFunc ( headers: RequestHeaders, body: ArrayFuncMethodRequest ): Promise<Array<string> | null> {
        return await axios.post<ArrayFuncMethodResponse>(
            `${(this.apiSchema)}/api/HttpCodegenTestService/arrayFunc`,
             body,
             {
                headers: headers,
             })
             .then(res => {
                if (res.data.payload === undefined || res.data.payload === null) {
                    return null;
                }
                return res.data.payload.value;
             })
             .catch((e: AxiosError<any>) => {
                throw e;
             })
     }

     public async options_arrayFunc ( headers: RequestHeaders ): Promise<RawAxiosResponseHeaders | (RawAxiosResponseHeaders & AxiosHeaders) | void> {
        return await axios.options<ArrayFuncMethodResponse>(
            `${(this.apiSchema)}/api/HttpCodegenTestService/arrayFunc`,
            {
                headers: headers
            })
            .then(res => {
                return res.headers;
            })
            .catch((e: AxiosError<any>) => {
                throw e;
            })
     }
     public async listFunc ( headers: RequestHeaders ): Promise<Array<string> | null> {
        const body = null;
        return await axios.post<ListFuncMethodResponse>(
            `${(this.apiSchema)}/api/HttpCodegenTestService/listFunc`,
             body,
             {
                headers: headers,
             })
             .then(res => {
                if (res.data.payload === undefined || res.data.payload === null) {
                    return null;
                }
                return res.data.payload.value;
             })
             .catch((e: AxiosError<any>) => {
                throw e;
             })
     }

     public async options_listFunc ( headers: RequestHeaders ): Promise<RawAxiosResponseHeaders | (RawAxiosResponseHeaders & AxiosHeaders) | void> {
        return await axios.options<ListFuncMethodResponse>(
            `${(this.apiSchema)}/api/HttpCodegenTestService/listFunc`,
            {
                headers: headers
            })
            .then(res => {
                return res.headers;
            })
            .catch((e: AxiosError<any>) => {
                throw e;
            })
     }
     public async mapFunc ( headers: RequestHeaders ): Promise<Map<string, string> | null> {
        const body = null;
        return await axios.post<MapFuncMethodResponse>(
            `${(this.apiSchema)}/api/HttpCodegenTestService/mapFunc`,
             body,
             {
                headers: headers,
             })
             .then(res => {
                if (res.data.payload === undefined || res.data.payload === null) {
                    return null;
                }
                return res.data.payload.value;
             })
             .catch((e: AxiosError<any>) => {
                throw e;
             })
     }

     public async options_mapFunc ( headers: RequestHeaders ): Promise<RawAxiosResponseHeaders | (RawAxiosResponseHeaders & AxiosHeaders) | void> {
        return await axios.options<MapFuncMethodResponse>(
            `${(this.apiSchema)}/api/HttpCodegenTestService/mapFunc`,
            {
                headers: headers
            })
            .then(res => {
                return res.headers;
            })
            .catch((e: AxiosError<any>) => {
                throw e;
            })
     }
     public async createUser ( headers: RequestHeaders, body: CreateUserMethodRequest ): Promise<User | null> {
        return await axios.post<CreateUserMethodResponse>(
            `${(this.apiSchema)}/api/HttpCodegenTestService/createUser`,
             body,
             {
                headers: headers,
             })
             .then(res => {
                if (res.data.payload === undefined || res.data.payload === null) {
                    return null;
                }
                return res.data.payload.value;
             })
             .catch((e: AxiosError<any>) => {
                throw e;
             })
     }

     public async options_createUser ( headers: RequestHeaders ): Promise<RawAxiosResponseHeaders | (RawAxiosResponseHeaders & AxiosHeaders) | void> {
        return await axios.options<CreateUserMethodResponse>(
            `${(this.apiSchema)}/api/HttpCodegenTestService/createUser`,
            {
                headers: headers
            })
            .then(res => {
                return res.headers;
            })
            .catch((e: AxiosError<any>) => {
                throw e;
            })
     }
     public async getUsers ( headers: RequestHeaders ): Promise<Array<User> | null> {
        const body = null;
        return await axios.post<GetUsersMethodResponse>(
            `${(this.apiSchema)}/api/HttpCodegenTestService/getUsers`,
             body,
             {
                headers: headers,
             })
             .then(res => {
                if (res.data.payload === undefined || res.data.payload === null) {
                    return null;
                }
                return res.data.payload.value;
             })
             .catch((e: AxiosError<any>) => {
                throw e;
             })
     }

     public async options_getUsers ( headers: RequestHeaders ): Promise<RawAxiosResponseHeaders | (RawAxiosResponseHeaders & AxiosHeaders) | void> {
        return await axios.options<GetUsersMethodResponse>(
            `${(this.apiSchema)}/api/HttpCodegenTestService/getUsers`,
            {
                headers: headers
            })
            .then(res => {
                return res.headers;
            })
            .catch((e: AxiosError<any>) => {
                throw e;
            })
     }
}
