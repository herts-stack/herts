package org.hertsstack.codegen;

import org.hertsstack.core.modelx.HertsMessage;

import java.io.FileWriter;
import java.io.IOException;
import java.lang.reflect.Method;
import java.lang.reflect.ParameterizedType;
import java.lang.reflect.Type;
import java.util.function.BiFunction;

class CodeGenUtil {
    public static final String GEN_COMMENT = "// Don't edit this file because this file is generated by herts codegen.";

    public static String capitalizeFirstLetter(String input) {
        if (input == null || input.isEmpty()) {
            return input;
        }

        char firstChar = input.charAt(0);
        if (Character.isLowerCase(firstChar)) {
            firstChar = Character.toUpperCase(firstChar);
            return firstChar + input.substring(1);
        } else {
            return input;
        }
    }

    private static boolean isInheritHertsMessage(String className) {
        if (className == null) {
            return false;
        }
        return className.contains(HertsMessage.class.getSimpleName());
    }

    public static boolean isCustomModelClass(Class<?> classInfo) {
        if (classInfo.getSuperclass() != null && isInheritHertsMessage(classInfo.getSuperclass().getName())) {
            return true;
        }
        return false;
    }

    public static String getFullPath(String outDir, String filename) {
        if (outDir == null || outDir.isEmpty()) {
            return filename;
        } else {
            return outDir + "/" + filename;
        }
    }

    public static void writeFile(String fileName, String rawData) {
        try {
            FileWriter fw = new FileWriter(fileName, false);
            fw.write(rawData);
            fw.close();
        } catch (IOException ex) {
            ex.printStackTrace();
        }
    }

    public static String getGeneticTypes(JavaType javaType, String defaultTypescriptType, Type[] types,
                                         BiFunction<JavaType, Class<?>, String> delegate) {

        String typescriptType = defaultTypescriptType;
        if (javaType != null && javaType.isCollection(javaType)) {
            boolean isReplaced = false;
            for (Type type : types) {
                if (type instanceof ParameterizedType) {
                    ParameterizedType parameterizedType = (ParameterizedType) type;
                    Type[] typeArgs = parameterizedType.getActualTypeArguments();
                    for (int idx = 0; idx < typeArgs.length; idx++) {
                        isReplaced = true;
                        JavaType genericJavaType = JavaType.findType(typeArgs[idx].getTypeName());
                        String genericTypescriptType;

                        if (genericJavaType == null) {
                            try {
                                Class<?> customModelClass = Class.forName(typeArgs[idx].getTypeName());
                                genericTypescriptType = delegate.apply(genericJavaType, customModelClass);
                            } catch (ClassNotFoundException ignore) {
                                genericTypescriptType = delegate.apply(genericJavaType, typeArgs[idx].getClass());
                            }
                        } else {
                            genericTypescriptType = delegate.apply(genericJavaType, typeArgs[idx].getClass());
                        }
                        typescriptType = typescriptType.replace("$" + idx, genericTypescriptType);
                    }
                }
            }
            if (!isReplaced) {
                typescriptType = TypescriptType.Any.getData();
            }
        }
        return typescriptType;
    }
}
